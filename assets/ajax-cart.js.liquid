/*============================================================================
  Ajax the add to cart experience by revealing it in a side drawer
  Plugin Documentation - http://shopify.github.io/Timber/#ajax-cart
  (c) Copyright 2015 Shopify Inc. Author: Carson Shold (@cshold). All Rights Reserved.

  This file includes:
    - Basic Shopify Ajax API calls
    - Ajax cart plugin

  This requires:
    - jQuery 1.8+
    - handlebars.min.js (for cart template)
    - modernizr.min.js
    - snippet/ajax-cart-template.liquid

  Customized version of Shopify's jQuery API
  (c) Copyright 2009-2015 Shopify Inc. Author: Caroline Schnapp. All Rights Reserved.
==============================================================================*/
if ((typeof ShopifyAPI) === 'undefined') { ShopifyAPI = {}; }

/*============================================================================
  API Helper Functions
==============================================================================*/
function attributeToString(attribute) {
  if ((typeof attribute) !== 'string') {
    attribute += '';
    if (attribute === 'undefined') {
      attribute = '';
    }
  }
  return jQuery.trim(attribute);
};

/*============================================================================
  API Functions
==============================================================================*/
ShopifyAPI.onCartUpdate = function(cart) {
  // alert('There are now ' + cart.item_count + ' items in the cart.');
};

ShopifyAPI.updateCartNote = function(note, callback) {
  var $body = $(document.body),
  params = {
    type: 'POST',
    url: '/cart/update.js',
    data: 'note=' + attributeToString(note),
    dataType: 'json',
    beforeSend: function() {
      $body.trigger('beforeUpdateCartNote.ajaxCart', note);
    },
    success: function(cart) {
      if ((typeof callback) === 'function') {
        callback(cart);
      }
      else {
        ShopifyAPI.onCartUpdate(cart);
      }
      $body.trigger('afterUpdateCartNote.ajaxCart', [note, cart]);
    },
    error: function(XMLHttpRequest, textStatus) {
      $body.trigger('errorUpdateCartNote.ajaxCart', [XMLHttpRequest, textStatus]);
      ShopifyAPI.onError(XMLHttpRequest, textStatus);
    },
    complete: function(jqxhr, text) {
      $body.trigger('completeUpdateCartNote.ajaxCart', [this, jqxhr, text]);
    }
  };
  jQuery.ajax(params);
};

ShopifyAPI.onError = function(XMLHttpRequest, textStatus) {
  var data = eval('(' + XMLHttpRequest.responseText + ')');
  if (!!data.message) {
    //alert(data.message + '(' + data.status  + '): ' + data.description);
  }
};

/*============================================================================
  POST to cart/add.js returns the JSON of the cart
    - Allow use of form element instead of just id
    - Allow custom error callback
==============================================================================*/
ShopifyAPI.addItemFromForm = function(form, callback, errorCallback) {
  console.log('ShopifyAPI.addItemFromForm');
  var $body = $(document.body),
  params = {
    type: 'POST',
    url: '/cart/add.js',
    data: jQuery(form).serialize(),
    dataType: 'json',
    beforeSend: function(jqxhr, settings) {
      $body.trigger('beforeAddItem.ajaxCart', form);
    },
    success: function(line_item) {
      // Push added item to GTM
      pushAddedItemDataToGTM(line_item)
      if ((typeof callback) === 'function') {
        callback(line_item, form);
      }
      else {
        ShopifyAPI.onItemAdded(line_item, form);
      }
      $body.trigger('afterAddItem.ajaxCart', [line_item, form]);
      setTimeout(function(e){
        $('body').addClass('ctm_mini_cart_active');
      },500)
      
    },
    error: function(XMLHttpRequest, textStatus) {
      if ((typeof errorCallback) === 'function') {
        errorCallback(XMLHttpRequest, textStatus);
      }
      else {
        ShopifyAPI.onError(XMLHttpRequest, textStatus);
      }
      $body.trigger('errorAddItem.ajaxCart', [XMLHttpRequest, textStatus]);
    },
    complete: function(jqxhr, text) {
      $body.trigger('completeAddItem.ajaxCart', [this, jqxhr, text]);
    }
  };
  jQuery.ajax(params);
};

// Get from cart.js returns the cart in JSON
ShopifyAPI.getCart = function(callback) {
  $(document.body).trigger('beforeGetCart.ajaxCart');
  jQuery.getJSON('/cart.js', function (cart, textStatus) {
    if ((typeof callback) === 'function') {
      callback(cart);
    }
    else {
      ShopifyAPI.onCartUpdate(cart);
    }
    $(document.body).trigger('afterGetCart.ajaxCart', cart);
  });
};

// POST to cart/change.js returns the cart in JSON
ShopifyAPI.changeItem = function(line, quantity, callback, plusOrMinus) {
  var $body = $(document.body),
  params = {
    type: 'POST',
    url: '/cart/change.js',
    data: 'quantity=' + quantity + '&line=' + line,
    dataType: 'json',
    beforeSend: function() {
      $body.trigger('beforeChangeItem.ajaxCart', [line, quantity]);
    },
    success: function(cart) {
      sendUpdatedQtyDataToGTM(line, cart, plusOrMinus);
      if ((typeof callback) === 'function') {
        callback(cart);
      }
      else {
        ShopifyAPI.onCartUpdate(cart);
      }
      $body.trigger('afterChangeItem.ajaxCart', [line, quantity, cart]);
    },
    error: function(XMLHttpRequest, textStatus) {
      $body.trigger('errorChangeItem.ajaxCart', [XMLHttpRequest, textStatus]);
      ShopifyAPI.onError(XMLHttpRequest, textStatus);
    },
    complete: function(jqxhr, text) {
      $body.trigger('completeChangeItem.ajaxCart', [this, jqxhr, text]);
    }
  };
  jQuery.ajax(params);
};

// Fetch Cart Data
ShopifyAPI.fetchCart = function(successCB, errorCB){
  fetch('/cart?view=json').then(function(res){
    return res.json();
  }).then(function(cart){
    if(successCB && typeof successCB === 'function'){
      successCB(cart);
    }
  }).catch(function(err){
    if(errorCB && typeof errorCB === 'function'){
      errorCB(err);
    }
  })
}

/*============================================================================
  Ajax Shopify Add To Cart
==============================================================================*/
var ajaxCart = (function(module, $) {

  'use strict';

  // Public functions
  var init, loadCart;

  // Private general variables
  var settings, isUpdating, $body;

  // Private plugin variables
  var $formContainer, $addToCart, $cartCountSelector, $cartCostSelector, $cartContainer, $drawerContainer;

  // Private functions
  var updateCountPrice, formOverride, itemAddedCallback, itemErrorCallback, cartUpdateCallback, buildCart, setupCart, cartCallback, adjustCart, adjustCartCallback, createQtySelectors, qtySelectors, validateQty;

  /*============================================================================
    Initialise the plugin and define global options
  ==============================================================================*/
  init = function (options) {

    // Default settings
    settings = {
      formSelector       : 'form[action^="/cart/add"]',
      cartContainer      : '#CartContainer',
      addToCartSelector  : 'input[type="submit"]',
      cartCountSelector  : null,
      cartCostSelector   : null,
      moneyFormat        : '${{amount}}',
      disableAjaxCart    : false,
      enableQtySelectors : true
    };

    // Override defaults with arguments
    $.extend(settings, options);

    // Select DOM elements
    $formContainer     = $(settings.formSelector);
    $cartContainer     = $(settings.cartContainer);
    $addToCart         = $formContainer.find(settings.addToCartSelector);
    $cartCountSelector = $(settings.cartCountSelector);
    $cartCostSelector  = $(settings.cartCostSelector);

    // General Selectors
    $body = $(document.body);

    window.money_format = settings.moneyFormat;
    
    // Track cart activity status
    isUpdating = false;

    // Setup ajax quantity selectors on the any template if enableQtySelectors is true
    if (settings.enableQtySelectors) {
      qtySelectors();
    }

    // Take over the add to cart form submit action if ajax enabled
    if (!settings.disableAjaxCart && $addToCart.length) {
      formOverride();
    }

    // Run this function in case we're using the quantity selector outside of the cart
    adjustCart();
  };

  loadCart = function () {
    $body.addClass('drawer--is-loading');
    ShopifyAPI.getCart(cartUpdateCallback);
  };

  updateCountPrice = function (cart) {
    if ($cartCountSelector) {
      $cartCountSelector.html(cart.item_count).removeClass('hidden-count');
      $('.js-drawer-open-right #CartCount,.js-drawer-open-right #CartCount2').html(cart.item_count).removeClass('hidden-count');

      if (cart.item_count === 0) {
        $cartCountSelector.addClass('hidden-count');
        $('.js-drawer-open-right #CartCount,.js-drawer-open-right #CartCount2').addClass('hidden-count');
      }
    }
    if ($cartCostSelector) {
      $cartCostSelector.html(Shopify.formatMoney(cart.total_price, settings.moneyFormat));
    }
  };

  formOverride = function () {
    $addToCart.unbind('click').on('click', function(evt) {
      evt.preventDefault();
      // Add class to be styled if desired
//       $addToCart.removeClass('is-added').addClass('is-adding');
	  $(this).removeClass('is-added').addClass('is-adding');
      // Remove any previous quantity errors
      $('.qty-error').remove();
      var form = $(this).closest('form');
      ShopifyAPI.addItemFromForm(form, itemAddedCallback, itemErrorCallback);
    });
  };

  itemAddedCallback = function (product) {
    $addToCart.removeClass('is-adding').addClass('is-added');

    ShopifyAPI.getCart(cartUpdateCallback);
  };

  itemErrorCallback = function (XMLHttpRequest, textStatus) {
    var data = eval('(' + XMLHttpRequest.responseText + ')');
    $addToCart.removeClass('is-adding is-added');

    if (!!data.message) {
      if (data.status == 422) {
        $formContainer.after('<div class="errors qty-error">'+ data.description +'</div>')
      }
    }
  };

  cartUpdateCallback = function (cart) {
    // Update quantity and price
    updateCountPrice(cart);
    buildCart(cart);
  };

  setupCart = function(cartjson){
    // Start with a fresh cart div
    console.log('cartjson',cartjson);
    var cart = cartjson.cart ? cartjson.cart : cartjson;
    var cart_items = cartjson.items ? cartjson.items : [];
    $cartContainer.empty();
  
    // Show empty cart
    if (cart.item_count === 0) {
      $cartContainer
        .append('<p>' + {{ 'cart.general.empty' | t | json }} + '</p>');
      cartCallback(cart);
      return;
    }
  
    // Handlebars.js cart layout
    var items = [],
        item = {},
        data = {},
        source = $("#CartTemplate").html(),
        template = Handlebars.compile(source);
  
    // Add each item to our handlebars.js data
    $.each(cart.items, function(index, cartItem) {
      //console.log(cartItem);
      /* Hack to get product image thumbnail
       *   - If image is not null
       *     - Remove file extension, add _small, and re-add extension
       *     - Create server relative link
       *   - A hard-coded url of no-image
      */
      if (cartItem.image != null){
        var prodImg = cartItem.image.replace(/(\.[^.]*)$/, "_small$1").replace('http:', '');
      } else {
        var prodImg = "//cdn.shopify.com/s/assets/admin/no-image-medium-cc9732cb976dd349a0df1d39816fbcc7.gif";
      }

      var inv_qty = cart_items.filter(function(c_i){
        return c_i.id === cartItem.id;
      })[0];
      
      $.getJSON('/products/'+cartItem.handle+'.js',function(product){
        // console.log(product);
        var tag_len = product.tags.length;
        var tags = product.tags;
        for(var i = 0; i < tag_len; i++){
          if(tags[i] == 'limit-quantity' || tags[i] == 'Limit-quantity' || tags[i] == 'Limit-Quantity'){
            console.log('demo 123456');
            $('.ajaxcart__row[data-id="'+product.id+'"] .ajaxcart__qty .ajaxcart__qty--plus').hide();
            $('.ajaxcart__row[data-id="'+product.id+'"] .ajaxcart__qty .ctm_plus_btn').show();
            $('.ajaxcart__row[data-id="'+product.id+'"] .ajaxcart__qty .ajaxcart__qty-num').addClass('ctm_disabled');
          }
        }
      })
      // Create item's data object and add to 'items' array
      item = {
        key: cartItem.key,
        line: index + 1, // Shopify uses a 1+ index in the API
        url: cartItem.url,
        id: cartItem.product_id,
        img: prodImg,
        name: cartItem.product_title,
        variation: cartItem.variant_title,
        properties: cartItem.properties,
        itemAdd: cartItem.quantity + 1,
        itemMinus: cartItem.quantity - 1,
        itemQty: cartItem.quantity,
        price: Shopify.formatMoney(cartItem.price, settings.moneyFormat),
        vendor: cartItem.vendor,
        linePrice: Shopify.formatMoney(cartItem.line_price, settings.moneyFormat),
        originalLinePrice: Shopify.formatMoney(cartItem.original_line_price, settings.moneyFormat),
        discounts: cartItem.discounts,
        discountsApplied: cartItem.line_price === cartItem.original_line_price ? false : true,
        inv_qty: inv_qty.inventory_quantity
      };
  
      items.push(item);
    });
  
    // Gather all cart data and add to DOM
    data = {
      items: items,
      note: cart.note,
      totalPrice: Shopify.formatMoney(cart.total_price, settings.moneyFormat),
      totalCartDiscount: cart.total_discount === 0 ? 0 : {{ 'cart.general.savings_html' | t: price: '[savings]' | json }}.replace('[savings]', Shopify.formatMoney(cart.total_discount, settings.moneyFormat)),
      totalCartDiscountApplied: cart.total_discount === 0 ? false : true
    };
  
    $cartContainer.append(template(data));
  
    cartCallback(cart);
    $('.ctm_plus_btn').on('click',function(e){
      e.preventDefault();
       $(this).closest('.ajaxcart__row').find('.limitation_msg').remove();
      $(this).closest('.ajaxcart__row').append('<p class="limitation_msg" style="color:#ff600b; margin: 5px 0 0;">Sorry! This product is Final Sale and limited to one per customer.</p>')
      var _this = $(this);
      setTimeout(function(e){
        _this.closest('.ajaxcart__row').find('.limitation_msg').remove();
      },5000)
      return false;
    })
    $('.js-drawer-open-right #CartCount,.js-drawer-open-right #CartCount2').text(cart.item_count);

  };
  
  buildCart = function (cart) {
    ShopifyAPI.fetchCart(function(cartjson){
      setupCart(cartjson);
    }, function(err){
      setupCart(cart);
    });
  };
  
  window.buildCart = buildCart ;

  cartCallback = function(cart) {
    $body.removeClass('drawer--is-loading');
    $body.trigger('afterCartLoad.ajaxCart', cart);

    if (window.Shopify && Shopify.StorefrontExpressButtons) {
      Shopify.StorefrontExpressButtons.initialize();
    }
  };

  adjustCart = function () {
    // Delegate all events because elements reload with the cart

    // Add or remove from the quantity
    $body.on('click', '.ajaxcart__qty-adjust', function() {
      if (isUpdating) {
        return;
      }

      var $el = $(this),
          line = $el.data('line'),
          $qtySelector = $el.siblings('.ajaxcart__qty-num'),
          qty = parseInt($qtySelector.val().replace(/\D/g, ''));

      var qty = validateQty(qty);
      let plusOrMinus = 'plus';

      // Add or subtract from the current quantity
      if ($el.hasClass('ajaxcart__qty--plus')) {
        qty += 1;
      } else {
        plusOrMinus = 'minus'
        qty -= 1;
        if (qty <= 0) qty = 0;
      }

      var $parent = $el.closest('.ajaxcart__product');
      var maxQty = $parent.data('maxqty');
      if(qty > maxQty){
        $parent.find('.error-msg').removeClass('hide');
        return;
      } else {
        $parent.find('.error-msg').addClass('hide');
      }

      // If it has a data-line, update the cart.
      // Otherwise, just update the input's number
      if (line) {
        updateQuantity(line, qty, plusOrMinus);
      } else {
        $qtySelector.val(qty);
      }
    });

    // Update quantity based on input on change
    $body.on('change', '.ajaxcart__qty-num', function() {
      if (isUpdating) {
        return;
      }

      var $el = $(this),
          line = $el.data('line'),
          qty = parseInt($el.val().replace(/\D/g, ''));

      var qty = validateQty(qty);

      // If it has a data-line, update the cart
      if (line) {
        updateQuantity(line, qty);
      }
    });

    // Prevent cart from being submitted while quantities are changing
    $body.on('submit', 'form.ajaxcart', function(evt) {
      if (isUpdating) {
        evt.preventDefault();
      }
    });

    // Highlight the text when focused
    $body.on('focus', '.ajaxcart__qty-adjust', function() {
      var $el = $(this);
      setTimeout(function() {
        $el.select();
      }, 50);
    });

    function updateQuantity(line, qty, plusOrMinus) {
      isUpdating = true;

      // Add activity classes when changing cart quantities
      var $row = $('.ajaxcart__row[data-line="' + line + '"]').addClass('is-loading');

      if (qty === 0) {
        $row.parent().addClass('is-removed');
      }

      // Slight delay to make sure removed animation is done
      setTimeout(function() {
        ShopifyAPI.changeItem(line, qty, adjustCartCallback, plusOrMinus);
      }, 250);
    }

    // Save note anytime it's changed
    $body.on('change', 'textarea[name="note"]', function() {
      var newNote = $(this).val();

      // Update the cart note in case they don't click update/checkout
      ShopifyAPI.updateCartNote(newNote, function(cart) {});
    });
  };

  adjustCartCallback = function (cart) {
    // Update quantity and price
    updateCountPrice(cart);

    // Reprint cart on short timeout so you don't see the content being removed
    setTimeout(function() {
      isUpdating = false;
      ShopifyAPI.getCart(buildCart);
    }, 150)
  };

  createQtySelectors = function() {
    // If there is a normal quantity number field in the ajax cart, replace it with our version
    if ($('input[type="number"]', $cartContainer).length) {
      $('input[type="number"]', $cartContainer).each(function() {
        var $el = $(this),
            currentQty = $el.val();

        var itemAdd = currentQty + 1,
            itemMinus = currentQty - 1,
            itemQty = currentQty;

        var source   = $("#AjaxQty").html(),
            template = Handlebars.compile(source),
            data = {
              key: $el.data('id'),
              itemQty: itemQty,
              itemAdd: itemAdd,
              itemMinus: itemMinus
            };

        // Append new quantity selector then remove original
        $el.after(template(data)).remove();
      });
    }
  };

  qtySelectors = function() {
    // Change number inputs to JS ones, similar to ajax cart but without API integration.
    // Make sure to add the existing name and id to the new input element
    var numInputs = $('input[type="number"]');

    if (numInputs.length) {
      numInputs.each(function() {
        var $el = $(this),
            currentQty = $el.val(),
            inputName = $el.attr('name'),
            inputId = $el.attr('id');

        var itemAdd = currentQty + 1,
            itemMinus = currentQty - 1,
            itemQty = currentQty;

        var source   = $("#JsQty").html(),
            template = Handlebars.compile(source),
            data = {
              key: $el.data('id'),
              itemQty: itemQty,
              itemAdd: itemAdd,
              itemMinus: itemMinus,
              inputName: inputName,
              inputId: inputId
            };

        // Append new quantity selector then remove original
        $el.after(template(data)).remove();
      });

      // Setup listeners to add/subtract from the input
      $('.js-qty__adjust').on('click', function() {
        var $el = $(this),
            id = $el.data('id'),
            $qtySelector = $el.siblings('.js-qty__num'),
            qty = parseInt($qtySelector.val().replace(/\D/g, ''));

        var qty = validateQty(qty);

        // Add or subtract from the current quantity
        if ($el.hasClass('js-qty__adjust--plus')) {
          qty += 1;
        } else {
          qty -= 1;
          if (qty <= 1) qty = 1;
        }

        // Update the input's number
        $qtySelector.val(qty);
      });
    }
  };

  validateQty = function (qty) {
    if((parseFloat(qty) == parseInt(qty)) && !isNaN(qty)) {
      // We have a valid number!
    } else {
      // Not a number. Default to 1.
      qty = 1;
    }
    return qty;
  };

  module = {
    init: init,
    load: loadCart
  };

//   $(document).on('click','.collection_product_wrapper .add_to_cart_wrapper a',function(e){
//     e.preventDefault();
//     var id = $(this).data('id');
//     console.log(id,'test');
//     var _this = $(this);
//     $.ajax({
//       method: "post",
//       url: "/cart/add.js",
//       data: "quantity=1&id="+id,
//       dataType: "json",
//       success: function(success){
//         console.log(success)
//         $.getJSON('/cart.js',function(cart){
//           buildCart(cart);
//         })
//       },
//       error: function(err){
//         console.log(err);
//         _this.closest('.add_to_cart_wrapper').find('.err').remove();
//         _this.closest('.add_to_cart_wrapper').append('<span class="err">Maximum quantity reached.</span>');
//         setTimeout(function(e){
//           _this.closest('.add_to_cart_wrapper').find('.err').remove();
//         },3000)
//       }
//     })
//   })
  
  return module;
  
}(ajaxCart || {}, jQuery));

// Added to bottom of ajax-cart.js.liquid
// Call pushAddedItemDataToGTM(line_item) on ShopifyAPI.addItemFromForm success

// When product is added to cart, send data to GTM

const pushAddedItemDataToGTM = (data) => {
  	console.log('pushAddedItemDataToGTM');
    let fetchPath = '/products/' + data.handle;
    if (data.url.includes('?variant=')) {
        fetchPath = data.url.split("?variant=")[0];
    }
    let itemName;
    let itemSku;
    let itemBrand;
    let itemCategory = '';
    let itemSize;
    let itemColor;
    let thisItemData;
    let itemProductType;
    let collectionOrigin = '';
    $.getJSON(fetchPath + '.js', (product) => {    
    }).done(function( data ) {
        const productData = data;
        let tagProductType;
        let tagProductCategory;
        let tagProductSubCategory;
        let itemTagCategory;
        let itemTagSubCategory;
        let itemTagProductType;
        const itemPrice = productData.price ? (productData.price/100).toFixed(2) : '';
        const firstAvailableVariant = productData.variants.filter(obj => {
            return obj.available === true
        })
        collectionOrigin = document.querySelector('.collection__header .section-header__title') ? document.querySelector('.collection__header .section-header__title').innerText.toLowerCase() : '';
        const listValue = 'plp-' + collectionOrigin;
        let finalListValue;

        if (collectionOrigin.length>0) {
            finalListValue = {
                list: listValue
            }
        }

        if (typeof productData.tags !== 'string') {
            tagProductType = productData.tags.filter(item => {
                return item.includes('Product Type_');
            });
            if (typeof tagProductType != 'undefined' && tagProductType.length>0 && tagProductType[0].includes('Product Type_')) itemTagProductType = tagProductType[0].replace('Product Type_','');
            tagProductCategory = productData.tags.filter(item => {
                return item.includes('Category_');
            });
            if (typeof tagProductCategory != 'undefined' && tagProductCategory.length>0 && tagProductCategory[0].includes('Category_')) itemTagCategory = tagProductCategory[0].replace('Category_','');
            tagProductSubCategory = productData.tags.filter(item => {
                return item.includes('Sub Category_');
            });
            if (typeof tagProductSubCategory != 'undefined' && tagProductSubCategory.length>0 && tagProductSubCategory[0].includes('Sub Category_','')) itemTagSubCategory = tagProductSubCategory[0].replace('Sub Category_','');
            if (typeof itemTagProductType != 'undefined' && itemTagProductType.length>0) {
                itemCategory += itemTagProductType + ' / ';
            }
            if (typeof itemTagCategory != 'undefined' && itemTagCategory.length>0) {
                itemCategory += itemTagCategory + ' / ';
            }
            if (typeof itemTagSubCategory != 'undefined' && itemTagSubCategory.length>0) {
                itemCategory += itemTagSubCategory;
            }
        }
      	itemCategory = itemCategory.toLowerCase();
        itemName = productData.title.toLowerCase();
        itemSku = firstAvailableVariant[0].sku.toLowerCase();
        itemBrand = productData.vendor.toLowerCase();
        itemSize = firstAvailableVariant[0].option2.toLowerCase();
        itemColor = firstAvailableVariant[0].option1.toLowerCase();
        
        thisItemData = {
            'name': itemName,
            'id': itemSku,
            'price': itemPrice,
            'brand': itemBrand,
            'category': itemCategory,
            'variant': itemSize,
            'quantity': 1,
            'position': 1,
            'dimension2': itemColor
        }

        let thisItemObj;

        if (collectionOrigin.length>0) {
            thisItemObj = {
                event: 'addToCart',
                uaCategory: 'product page', // event location
                uaAction: 'add to cart',
                uaLabel: listValue, //original list name
                ecommerce: {
                    currencyCode: 'CAD',
                    add: {
                        actionField: finalListValue,
                        products: [thisItemData]
                    }
                }
            }
        } else {
            thisItemObj = {
                event: 'addToCart',
                uaCategory: 'product page', // event location
                uaAction: 'add to cart',
                // uaLabel: 'plp-sweatshirts', //original list name
                ecommerce: {
                    currencyCode: 'CAD',
                    add: {
                        products: [thisItemData]
                    }
                }
            }
        }

        console.log('thisItemData: ', thisItemData);
        console.log('thisItemObj: ', thisItemObj);
            dataLayer.push(thisItemObj)
    });
}

// Cart Product quanity update - send product data to GTM

// Notes:
// Product tags are not available in cart data so we cannot pass the category
// Adding another get request for Retrieving product tags is possible not recommended for performance reasons

const sendUpdatedQtyDataToGTM = (line, data, plusOrMinus) => {
    const itemLineOrder = line - 1;
    const cartItems = data.items;
    const itemThatChanged = data.items[itemLineOrder];
    let itemCategory = '';
    // console.log('itemThatChanged :', itemThatChanged);
    const productData = itemThatChanged;
    if(productData != undefined){
      const itemSku = productData.sku.toLowerCase();
      const itemBrand = productData.vendor.toLowerCase();
      const itemSize = productData.variant_options[1].toLowerCase();
      const itemColor = productData.variant_options[0].toLowerCase();
      const itemQty = productData.quantity;
    
    // if(productData.product_type != undefined){
	//  const itemCategory = productData.product_type;
    // }else{
    //  const itemCategory = '';
    // }
    // console.log('productPath: ', productPath);
    const fetchPath = '/products/' + productData.handle;
    // console.log('itemPath: ', itemPath);
    // console.log('editedItemPath: ', editedItemPath);
    $.getJSON(fetchPath + '.js', (product) => {
    }).done(function( data ) {
//       console.log(data);
        let itemPrice = data.price && typeof data.price === 'number' ? (data.price / 100).toFixed(2) : '';
        const productOptions = data.options_with_values;
        

        if (typeof data.tags !== 'string') {
            tagProductType = data.tags.filter(item => {
                return item.includes('Product Type_');
            });
            if (typeof tagProductType != 'undefined' && tagProductType.length>0 && tagProductType[0].includes('Product Type_')) itemTagProductType = tagProductType[0].replace('Product Type_','');
            tagProductCategory = data.tags.filter(item => {
                return item.includes('Category_');
            });
            if (typeof tagProductCategory != 'undefined' && tagProductCategory.length>0 && tagProductCategory[0].includes('Category_')) itemTagCategory = tagProductCategory[0].replace('Category_','');
            tagProductSubCategory = data.tags.filter(item => {
                return item.includes('Sub Category_');
            });
            if (typeof tagProductSubCategory != 'undefined' && tagProductSubCategory.length>0 && tagProductSubCategory[0].includes('Sub Category_','')) itemTagSubCategory = tagProductSubCategory[0].replace('Sub Category_','');
            if (typeof itemTagProductType != 'undefined' && itemTagProductType.length>0) {
                itemCategory += itemTagProductType + ' / ';
            }
            if (typeof itemTagCategory != 'undefined' && itemTagCategory.length>0) {
                itemCategory += itemTagCategory + ' / ';
            }
            if (typeof itemTagSubCategory != 'undefined' && itemTagSubCategory.length>0) {
                itemCategory += itemTagSubCategory;
            }
        }
        itemCategory = itemCategory.toLowerCase();
        itemName = data.title.toLowerCase();
        // console.log('data: ', data);
    
        const thisItemData = {
            'name': itemName,
            'id': itemSku,
            'price': itemPrice,
            'brand': itemBrand,
            'category': itemCategory,
            'variant': itemSize, // size
            'quantity': itemQty,
            'position': line,
            'dimension2': itemColor // color
        }
    
        // console.log('thisItemData: ', thisItemData);
        let dataLayerObj = {
            event: 'addToCart',
            uaCategory: 'quick view', // event location
            uaAction: 'add to cart',
            // uaLabel: 'plp-sweatshirts', //original list name - would be really inefficient to retrieve tis
            ecommerce: {
                currencyCode: 'CAD',
                add: {
                    products: [thisItemData]
                }
            }
        }

        // console.log('plusOrMinus: ', plusOrMinus);
        
        if (plusOrMinus.includes('minus')) {
            dataLayerObj = {
              event: 'removeFromCart',
              uaCategory: 'quick view', // event location
              uaAction: 'remove from cart',
              // uaLabel: 'plp-sweatshirts', //original list name - would be really inefficient to retrieve tis
              ecommerce: {
                  currencyCode: 'CAD',
                  remove: {
                      products: [thisItemData]
                  }
              }
              }
        }
        // console.log('dataLayerObj: ', dataLayerObj);
    
        dataLayer.push(dataLayerObj);   
    })
    }
}